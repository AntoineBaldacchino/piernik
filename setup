#!/usr/bin/perl
# $Id: makemake 506 2008-12-22 00:41:56Z olk $
#
# Usage: makemake {<program name> {<F90 compiler or fc or f77 or cc or c>}}
#
# Generate a Makefile from the sources in the current directory.  The source
# files may be in either C, FORTRAN 77, Fortran 90 or some combination of
# these languages.  If the F90 compiler specified is cray or parasoft, then
# the Makefile generated will conform to the conventions of these compilers.
# To run makemake, it will be necessary to modify the first line of this script
# to point to the actual location of Perl on your system.
#
# Written by Michael Wester <wester@math.unm.edu> February 16, 1995
# Cotopaxi (Consulting), Albuquerque, New Mexico
#
# Modified by Kacper Kowalik <kowalik@astri.umk.pl> October, 24, 2007
# Modified by Dominik Woltanski <minikwolt@astri.umk.pl> April-June, 2008
# Modified by Oskar Karczewski <olk@ncac.torun.pl> December, 2008

use Switch;
use File::Path;
use File::Copy;
use File::Basename;
use Getopt::Long;

# use warnings;

# return status

print "Called 'setup " . "@ARGV" . "'\n";

my %moo=();
my $OK = 0;
my $FAILED = 1;
GetOptions("help"=>\$moo{help},
           "problems"=>\$moo{problems},
           "units"=>\$moo{units},
           "dumpenv"=>\$moo{dumpenv},
           "define=s@"=>\@define,
           "compiler:s"=>\$moo{compiler});

# DEBUG
#foreach (keys %moo) {
# print "$_ = $moo{$_}\n";
#}

my $SELF = fileparse("$0");
my $argc = @ARGV;

# DEBUG
#print "Unprocessed by Getopt::Long\n" if $ARGV[0];
#foreach (@ARGV) {
#  print "$_\n";
#}

if($argc < 1){
  $moo{help} = 1;
  $is_prob = 0;
} 

if($moo{problems}){
   print " \n";
   system ( "cat ./problems/*/info");
   print " \n";
   exit $OK;
} elsif ($moo{units}){
   print " \n";
   system ( "grep uses ./src/base/constants.F90");
   print " \n";
   exit $OK;
} elsif ($moo{help}){
   print "USAGE: " . $SELF . " [PROBLEM] [OPTIONS]\n";
   print "Available options:\n";
   print " --help\t\t- print this help message\n";
   print " --problems\t- print available problems and exit\n";
   print " --units\t- print available unit systems and exit\n";
   print " --copy\t\t- hard-copy source files instead of linking them\n";
   print " --dumpenv\t- do not compile the source but dump the environment to \'obj/version.F90\'\n";
   print " --compiler <configuration>\t - choose specified config from compilers directory\n";
   print " --define <flag> \t - inject precompiler directive to piernik.def\n\n";

   print "all-in-one wrapper for a selected problem:\n";
   print "> " . $SELF . " <problem>\n";
   print "this will:\n";
   print "* create directory \'./obj\' with source files for <problem>\n";
   print "* compile the source using the default compiler\n";
   print "* put the executable in \'./runs/<problem>\'\n\n";

   print "to change the compiler settings (after \'" . $SELF . " <problem>\'):\n";
   print "> cd obj\n";
   print "> ./newcompiler <settingsname>\n";
   print "> make\n";
   print "then copy files to your run directory (optional), e.g.\n";
   print "> cp {piernik,problem.par} ../runs/<problem>\n";
   print "> cd ../runs/<problem>\n\n";

   print "to run PIERNIK:\n";
   print "edit problem.par as appropriate, e.g.\n";
   print "* add var names for visualisation => var(<number>)='<name>'\n";
   print "* change domain dimensions/resolution => DOMAIN_SIZES\n";
   print "* change domain divisions for parallel processing => MPI_BLOCKS\n";
   print "* change frequency of data dumps => dt_* entries\n";
   print "* etc.\n";
   print "execute\n";
   print "> ./piernik\n";
   print "or for <np> parallel processes\n";
   print "> mpirun -n <np> ./piernik\n\n";

   print "HEALTH WARNINGS:\n";
   print "* the contents of \'./obj\' and \'./runs/<problem>\' are overwritten\n";
   print "  each time \'" . $SELF . " <problem>\' is run\n";
   print "* the def file \'piernik.def\' is copied only for reference, to change flags\n";
   print "  with which the source is compiled edit \'./problems/<problem>/piernik.def\'\n";
   print "* by default PIERNIK will read the configuration file \'problem.par\' from the\n";
   print "  working directory, to use alternative configurations execute\n";
   print "  \'./piernik <directory with an alternative problem.par>\'\n";
#   print "!===================================================================================!\n";
   print "\nEnjoy your work with piernik!\n";
   if ( $is_prob == 0 ) {
	exit $OK;
   } else {
	exit $FAILED;
   }
}
if($moo{compiler}) {$compiler = $moo{compiler}.".in"} else {$compiler = 'default.in'};
# default
open MAKEIN, "< compilers/".$compiler or die $!;
@makein = <MAKEIN>;
close MAKEIN;
rmtree(['obj']);
mkpath(['obj']);
$probdir = "problems/" . $ARGV[0] . "/";
if(!-r $probdir) {
   print "$probdir: $!\n";
   print "problem \'" . $ARGV[0] . "\' does not exist\n";
   exit $FAILED;
}

@prob = ( "../" . $probdir . "initproblem.F90",
          "../" . $probdir . "problem.par" );
@base = <src/base/*.F90>;
for (@base) {
   s/src/\.\.\/src/;
}
@addons = ();
copy("compilers/newcompiler","obj/newcompiler");
system("chmod a+x obj/newcompiler");
$defs = $probdir."piernik.def";
   if ( ! $CL_VALUES[0] ) {
      symlink("../".$defs,"obj/piernik.def") or die "failed linking piernik.def";
   } else {
      copy($defs,"obj/piernik.def") or die "failed copying piernik.def";
   }
open (defs) or die "Can't open the file piernik.def!";
@fdefs = <defs>;
@d = grep (/define/,@fdefs);
if(@define) {
   foreach $inc (@define) {
      push(@d, "#define ".$inc."\n");
      $cppflags = $cppflags . " -D" . $inc;
   }
}
if( grep { /GRAV/ }  @d) {
   push(@addons, "../src/gravity/gravity.F90");
   push(@addons, "../src/gravity/hydrostatic.F90");
   }
if( grep { /SELF_GRAV/ }  @d) {push(@addons, "../src/gravity/poissonsolver.F90");}
if( grep { /MULTIGRID/ } @d) {push(@addons, "../src/gravity/multigrid.F90");}
if( grep { /SHEAR/ }  @d) {push(@addons, "../src/shear/shear.F90");}
if( grep { /HDF5/ } @d) {push(@addons, "../src/hdf5/dataio_hdf5.F90");}

push(@addons, "../src/fluids/initfluids.F90");
push(@addons, "../src/fluids/fluidindex.F90");
push(@addons, "../src/fluids/fluxes.F90");

if( grep { /MAGNETIC/} @d) {
   push(@addons, "../src/magnetic/magboundaries.F90");
   push(@addons, "../src/scheme/rtvd_split/advects.F90");
   if( grep { /RESIST/} @d) {push(@addons, "../src/magnetic/resist/resistivity.F90");} }

if( grep { /IONIZED/} @d) {
   push(@addons, "../src/fluids/ionized/initionized.F90");
   push(@addons, "../src/fluids/ionized/fluxionized.F90");
   push(@addons, "../src/fluids/ionized/timestepionized.F90"); }
if( grep { /NEUTRAL/} @d) {
   push(@addons, "../src/fluids/neutral/initneutral.F90");
   push(@addons, "../src/fluids/neutral/fluxneutral.F90");
   push(@addons, "../src/fluids/neutral/timestepneutral.F90"); }
if( grep { /DUST/} @d) {
   push(@addons, "../src/fluids/dust/initdust.F90");
   push(@addons, "../src/fluids/dust/fluxdust.F90");
   push(@addons, "../src/fluids/dust/timestepdust.F90"); }
if( grep { /COSM_RAYS/} @d) {
   push(@addons, "../src/fluids/cosmicrays/initcosmicrays.F90");
   push(@addons, "../src/fluids/cosmicrays/fluxcosmicrays.F90");
   push(@addons, "../src/fluids/cosmicrays/timestepcosmicrays.F90");
   push(@addons, "../src/fluids/cosmicrays/crdiffusion.F90");
   }
if( grep { /FLUID_INTERACTIONS/} @d) {
   push(@addons, "../src/fluids/interactions/interactions.F90");
   push(@addons, "../src/fluids/interactions/timestepinteractions.F90");
}
if( grep { /SN_SRC/} @d) {
   push(@addons, "../src/supernovae/snsources.F90");
}
if( grep { /SNE_DISTR/} @d) {
   push(@addons, "../src/supernovae/sndistr.F90");
}

push(@addons, "../src/scheme/rtvd_split/fluidupdate.F90");
push(@addons, "../src/scheme/rtvd_split/sweeps.F90");
push(@addons, "../src/scheme/rtvd_split/rtvd.F90");

@files = ( @base, @prob, @addons );
@symln = ();
foreach $file (@files) {
   $pos = rindex($file,"\/")+1;
   $len = length($file);
   push(@symln,"obj/".substr($file,$pos,$len-$pos) );
}

if ( $CL_VALUES[0] ) {
   chdir 'obj';
}
for $i (0 .. $#symln){
   if ( ! $CL_VALUES[0] ) {
      symlink($files[$i],$symln[$i]) or die "failed linking $files[$i]: $!";
   } else {
      copy($files[$i],".") or die "failed copying $files[$i]: $!";
   }
}
if ( ! $CL_VALUES[0] ) {
   chdir 'obj';
}
open(MAKEFILE, "> Makefile-prep");

# Source listing
#
#print MAKEFILE @makein;
print MAKEFILE "SRCS =\t";
@srcs = <*.F90>;
&PrintWords(8, 0, @srcs);
print MAKEFILE "\n\n";
#
# Object listing
#
print MAKEFILE "OBJS =\t";
@objs = @srcs;
foreach (@objs) { s/\.[^.]+$/.o/ };
&PrintWords(8, 0, @objs);
print MAKEFILE "\n\n";
#
# Define common macros
#
print MAKEFILE "LIBS = -lmfhdf -ldf -ljpeg -lz\n";
print MAKEFILE "CPPFLAGS = " . $cppflags . "\n";
print MAKEFILE "ifdef HDF_LIB\nLIBS += -L\$(HDF_LIB)\nendif\n";
print MAKEFILE "ifdef MHDF_LIB\nLIBS += -L\${MHDF_LIB}\nendif\n";
#
# make
#
print MAKEFILE "all: date \$(PROG) \n\n";
print MAKEFILE "\$(PROG): \$(OBJS)\n";
print MAKEFILE "\t\$(", &LanguageCompiler($ARGV[1], @srcs);
print MAKEFILE ") \$(LDFLAGS) -o \$@ \$(OBJS) \$(LIBS)\n\n";
#
# make date
#
print MAKEFILE "date: \n";
print MAKEFILE "\tif [ -L version.F90 ]; then unlink version.F90; cp ../src/base/version.F90 .; fi; \n";
print MAKEFILE "\tif [ ! -f env.dat ]; \\\n";
print MAKEFILE "\tthen \\\n";
print MAKEFILE "\t\thead -n 1 *.F90 | grep Id > env.dat; \\\n";
print MAKEFILE "\t\tcat piernik.def >> env.dat; \\\n";
print MAKEFILE "\t\twc -l env.dat | awk '{print \"   integer, parameter :: nenv = \"\$\$1\"+1\"}' - >> version.F90; \\\n";
print MAKEFILE "\t\techo \"   character*128, dimension(nenv) :: env\" >> version.F90; \\\n";
print MAKEFILE "\t\techo 'contains' >> version.F90; \\\n";
print MAKEFILE "\t\techo '   subroutine init_version' >> version.F90; \\\n";
print MAKEFILE "\t\techo '      implicit none' >> version.F90; \\\n";
print MAKEFILE "\t\tawk '{printf(\"       env(%i) = \\\" %s \\\"\\n\",NR,\$\$0)}' env.dat >> version.F90; \\\n";
print MAKEFILE "\t\techo '    end subroutine init_version' >> version.F90; \\\n";
print MAKEFILE "\t\techo 'end module version' >> version.F90; \\\n";
print MAKEFILE "\tfi;\n\n";
#
# make clean
#
print MAKEFILE "clean:\n";
print MAKEFILE "\trm -f \$(PROG) \$(OBJS) *.mod\n\n";
#
# make clean-run
#
print MAKEFILE "clean-run:\n";
print MAKEFILE "\trm -f *.bck *~ *.hdf *.res *.log *.tsl *.out *.tmp core*\n\n";
#
# make clean-all
#
print MAKEFILE "clean-all:\n";
print MAKEFILE "\trm -f \$(PROG) \$(OBJS) *.mod *.bck *~ *.hdf *.res *.log *.tsl *.out *.tmp core* *.f *.dbg \n\n";
#
# Make .F90 a valid suffix
#
print MAKEFILE ".SUFFIXES: \$(SUFFIXES) .F90\n\n";
#
# .F90 -> .o
#
print MAKEFILE ".F90.o:\n";
print MAKEFILE "\t\$(F90) \$(CPPFLAGS) \$(F90FLAGS) -c \$<\n\n";
#
# override the built-in rule for .mod (Modula-2 source code files)
#
print MAKEFILE "%.o : %.mod\n\n";
#
# Dependency listings
#
&MakeDependsf90($ARGV[1]);
&MakeDepends("*.f *.F *.F90", '^\s*use\s+["\']([^"\']+)["\']');
&MakeDepends("*.c",     '^\s*#\s*include\s+["\']([^"\']+)["\']');

# system("./post","mhd",$ARGV[0]); # !found
#system("./newcompiler Makefile");
print "Setting the '" . $compiler . "' configuration\n";
system("./newcompiler " . substr($compiler, 0, -3) );

# COMPILE NOW
chdir('..');
# do checks
if ( (! -r 'obj') || (! -r 'obj/problem.par') || (! -r 'obj/Makefile') ) {
   print "problem with directory \'obj\'\n";
   exit $FAILED;
}

# compile
if ( $CL_VALUES[4] ) {
   system('make -C obj date');
   print "\ndone\n";
   exit $OK;
} else {
   system('make -C obj');
}

if ( ! -x 'obj/piernik' ) {
   print "\nit appears that \'make\' crashed\n";
   print "cannot continue\n";
   exit $FAILED;
}

my $problemname = $ARGV[0];
if ( -d 'run' ) {
    print "\ndirectory \'run\' exists but not used anymore\n";
    print "point your scripts to \'runs/" . $problemname . "\' instead\n";
}
if ( ! -d 'runs' ) {
    mkdir('runs');
}
my $problempath = "runs/" . $problemname;
if ( ! -d $problempath ) {
    mkdir($problempath);
} else {
    rmtree([$problempath]);
    mkpath([$problempath]);
}

if ( copy('obj/piernik', $problempath) && \
	chmod(0755, "$problempath/piernik") && \
	copy('obj/problem.par', $problempath) && \
	copy('obj/piernik.def', $problempath) ) {
   print "\n" . $problemname . " ready in " . $problempath . "\n";
} else {
   print "$!\n";
   exit $FAILED;
}

exit $OK;

#
# &PrintWords(current output column, extra tab?, word list); --- print words
#    nicely
#
sub PrintWords {
   local($columns) = 78 - shift(@_);
   local($extratab) = shift(@_);
   local($wordlength);
   #
   print MAKEFILE @_[0];
   $columns -= length(shift(@_));
   foreach $word (@_) {
      $wordlength = length($word);
      if ($wordlength + 1 < $columns) {
         print MAKEFILE " $word";
         $columns -= $wordlength + 1;
         }
      else {
         #
         # Continue onto a new line
         #
         if ($extratab) {
            print MAKEFILE " \\\n\t\t$word";
            $columns = 62 - $wordlength;
            }
         else {
            print MAKEFILE " \\\n\t$word";
            $columns = 70 - $wordlength;
            }
         }
      }
   }

#
# &LanguageCompiler(compiler, sources); --- determine the correct language
#    compiler
#
sub LanguageCompiler {
   local($compiler) = &toLower(shift(@_));
   local(@srcs) = @_;
   #
   if (length($compiler) > 0) {
      CASE: {
         grep(/^$compiler$/, ("fc", "f77")) &&
            do { $compiler = "FC"; last CASE; };
         grep(/^$compiler$/, ("cc", "c"))   &&
            do { $compiler = "CC"; last CASE; };
         $compiler = "F90";
         }
      }
   else {
      CASE: {
         grep(/\.F90$/, @srcs)   && do { $compiler = "F90"; last CASE; };
         grep(/\.(f|F)$/, @srcs) && do { $compiler = "FC";  last CASE; };
         grep(/\.c$/, @srcs)     && do { $compiler = "CC";  last CASE; };
         $compiler = "???";
         }
      }
   $compiler;
   }

#
# &toLower(string); --- convert string into lower case
#
sub toLower {
   local($string) = @_[0];
   $string =~ tr/A-Z/a-z/;
   $string;
   }

#
# &uniq(sorted word list); --- remove adjacent duplicate words
#
sub uniq {
   local(@words);
   foreach $word (@_) {
      if ($word ne $words[$#words]) {
         push(@words, $word);
         }
      }
   @words;
   }

#
# &MakeDepends(language pattern, include file sed pattern); --- dependency
#    maker
#
sub MakeDepends {
   local(@incs);
   local($lang) = @_[0];
   local($pattern) = @_[1];
   #
   foreach $file (<${lang}>) {
      open(FILE, $file) || warn "Cannot open $file: $!\n";
      while (<FILE>) {
         /$pattern/i && push(@incs, $1);
         }
      if (defined @incs) {
         $file =~ s/\.[^.]+$/.o/;
         print MAKEFILE "$file: ";
         &PrintWords(length($file) + 2, 0, @incs);
         print MAKEFILE "\n";
         undef @incs;
         }
      }
   }

#
# &MakeDependsf90(f90 compiler); --- FORTRAN 90 dependency maker
#
sub MakeDependsf90 {
   local($compiler) = &toLower(@_[0]);
   local(@dependencies);
   local(%filename);
   local(@incs);
   local(@modules);
   local($objfile);
   #
   # Associate each module with the name of the file that contains it
   #
   foreach $file (<*.F90>) {
      open(FILE, $file) || warn "Cannot open $file: $!\n";
      while (<FILE>) {
         /^\s*module\s+([^\s!]+)/i &&
            ($filename{&toLower($1)} = $file) =~ s/\.F90$/.o/;
         }
      }
   #
   # Print the dependencies of each file that has one or more include's or
   # references one or more modules
   #
   foreach $file (<*.F90>) {
      open(FILE, $file);
      while (<FILE>) {
#         /^\s*include\s+["\']([^"\']+)["\']/i && push(@incs, $1);
         /^\s*use\s+([^\s,!]+)/i && push(@modules, &toLower($1));
         }
      if (defined @incs || defined @modules) {
         ($objfile = $file) =~ s/\.F90$/.o/;
         print MAKEFILE "$objfile: $file ";
         undef @dependencies;
         foreach $module (@modules) {
            push(@dependencies, $filename{$module});
            }
         @dependencies = &uniq(sort(@dependencies));
         &PrintWords(length($objfile) + 2, 0,
                     @dependencies, &uniq(sort(@incs)));
         print MAKEFILE "\n";
         undef @incs;
         undef @modules;
         #
         # Cray F90 compiler
         #
         if ($compiler eq "cray") {
            print MAKEFILE "\t\$(F90) \$(F90FLAGS) -c ";
            foreach $depend (@dependencies) {
               push(@modules, "-p", $depend);
               }
            push(@modules, $file);
            &PrintWords(30, 1, @modules);
            print MAKEFILE "\n";
            undef @modules;
            }
         #
         # ParaSoft F90 compiler
         #
         if ($compiler eq "parasoft") {
            print MAKEFILE "\t\$(F90) \$(F90FLAGS) -c ";
            foreach $depend (@dependencies) {
               $depend =~ s/\.o$/.F90/;
               push(@modules, "-module", $depend);
               }
            push(@modules, $file);
            &PrintWords(30, 1, @modules);
            print MAKEFILE "\n";
            undef @modules;
            }
         }
      }
   }
